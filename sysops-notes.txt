root aws account access IAM that can create
- user
- group
- role
- policy


IAM : identity access management

best practice to use individual accounts instead of root


ALB : application load balancer


accounts are not tied to one country but objects such as EC2 container, are


dynamic alias - one email address can have multiple accounts using alias


to create alias
1. services menu
2. security, identity & compliance
3. IAM


budget - set a budget and alert if going to reach limit
You will be notified when 
1) your actual spend reaches 85% 
2) your actual spend reaches 100% 
3) if your forecasted spend is expected to reach 100%


3 ways to log in to AWS
1. online console (website)
2. CLI
3. API


principal - a person/application that can make a request for an action on an AWS resource. part of RBAC I suppose

principal types
1. IAM user
2. IAM role
3. federated user
4. application



ARN : amazon resource name


two types of access control polcicy (allow/deny)
1. identity based
2. resource based



access control process

start

IAM principal

1. provide request context; info about the request
2. authentication; username/pw or access key ID and secret 
3. authorisation; use request context to determine if request is allow/deny



IAM user vs IAM role
- user is for long term access with permanent credentials
- role is for temporary access

role is safer than user. should minimise user
create user only when real human wants to access aws service


the "version" field within a custom trust policy json, is the version of syntax to use. It's a date value. Cannot anyhow change



IAM user group 
- a group of IAM user
- can set permissions for an entire group


permissions are ADDITIVE for user group and user
wherever there's explicit deny, it will always be followed regardless


can authenticate as a user, but not as a group

but can get permissions as a group


IAM user group is NOT a principal thats why cannot authenticate groups


actually IAM user is not recommended at all. Why?

- IAM user use permanent credentials. roles and IAM IC user do not

- IAM user must manage credentials for each account whereas IAM IC user can manage centrally

- IAM user is tied to single AWS acount. IAM IC user can connect to external active directory

- IAM user must be manually deleted if staff leaves. Since IAM IC user is connected to AD, can delete from AD and it will sync with AWS IAM IC




IAM user okay for smaller organisation




IAM role follows cloud native best practices because specific roles with limited access and expiry date are given to applications and services. Least privilege



1 IAM IC user can have access to several AWS accounts



VPC: virtual private cloud
- logical isolated portion of AWS within a region
- 1 region can have multiple VPC
- 1 VPC can have multiple availability zone
- 1 availability zone can have multiple subnet
- 1 subnet can have multiple EC2 instances

hierachy

Region
vpc
az
subnet
ec2 instance



within VPC is router and default gateway (internet gateway)


only way to interact with router is through the main route table


each VPC has its own CIDR block; aka its own local private subnet



S3 is outside VPC because its a public service
S3 is like google drive. It does not have querying like mongo or sql



VPC endpoint is used to access AWS services that are public ie S3, through a private connection (doesnt touch internet)



API access to any AWS service ie dynamo, s3, ec2, all depend if using public connection or private connection. Both can work




terraform or other apps/services will use AWS Security Token Service (STS) to assume a role
it requires initial credentials which acts as the principal which tf authenticates with aws



========================================
IDEAL AWS security with terraform
========================================


create 1x IAM user account for perm credentials

keep credentials in vault

vault generates temp credentials for roles

terraform uses temp credentials and role

gitlab too



BUT HCP vault-secrets doesn't support aws secrets engine. The self hosted one does. so skip this for poc
TF itself will hold the perm credentials 


unused elastic IP will cost money. The auto default eip given to EC2 instances do not cost money



stateful vs stateless firewall
- stateful means when there is a rule that allows A talk to B, B talk to A is allowed by default
- stateless is opposite. If there's a rule that allows A ta B, B cannot talk to A by default



security group is stateful firewall
- security group can be applied to a group of instances within a subnet
- security groups apply to instance level
- only apply to instances that are within the group
- only has allow rules
- evaluate all rules flat
- deny all


network ACL is stateless firewall
- has allow and deny rules
- rules are in top down order
- NACL attach to subnets
- They apply to subnet level only
- applies to all instances within a subnet
- Only control traffic in and out of subnets
- does not control traffic WITHIN subnet
- only at the border of a subnet
- if one subnet talk to another, then there are 2 NACLs to check rules because each subnet has 1 NACL attached


ec2 host: the bare metal server running ec2


different kinds of ip addr, an ec2 instance can have
1. public ip
- standard internet ip
- no charge
- cannot be moved between instances
- lost when instance is stopped
- associated with a private ip
- used in public subnet only

2. private ip
- retained when instance stops
- used in public and private subnets


3. elastic ip 
- static public ip addr
- charged if not used
- associated with a private ip on the instance
- can move between instances



types of network interfaces
1. elastic network interface (ENI)
- cannot attach ENI from one AZ to another
- ENI can only attach to subnets within the same AZ
- can be used with any instance type

2. elastic network adapter (ENA)
- higher performance than ENI
- higher bandwith and lower latency
- only some instance support it


3. elastic fabric adapter (EFA)
- even higher performance
- usually for AIML use
- all instance support it





types of storage for ec2 instances

1. Elastic block store (EBS)
- persistant storage
- c drive on an ec2 instance could be stored on an ebs elsewhere, connected over network
- means same persistant storage can be used on different instance since ebs is separated
- ebs exist only within AZ

2. instance store
- not over network
- natively stored on ec2 host itself
- better performance
- non-persistant (ephemeral)
- only use when high performance needed or when the data has backups




amazon machine image (AMI)
- basically the OS image that the EC2 instance will use
- has an EBS snapshot linked to it (persistent storage)
- can predefine the image just like docker

stopping and starting an instance will mean that the physical storage used in baremetal is different each time


default username for ssh for t2.micro ec2 is:
For Amazon Linux 2 or the Amazon Linux AMI, the username is ec2-user.
For a CentOS AMI, the user name is centos.
For a Debian AMI, the user name is admin.
For a Fedora AMI, the user name is ec2-user or fedora.
For a RHEL AMI, the user name is ec2-user or root.
For a SUSE AMI, the user name is ec2-user or root.
For a Ubuntu AMI, the user name is ubuntu.
For an Oracle AMI, the user name is ec2-user.
For a Bitnami AMI, the user name is bitnami.
Otherwise, if ec2-user and root don't work, check with the AMI provider


you can change instance type (vertical scaling) and still retain data using EBS

instead of using ubuntu gparter, can use CLI
// Create a filesystem on the EBS volume 
sudo mkfs -t ext4 /dev/xvdf
// Create a mount point for the EBS volume 
sudo mkdir /data
//Mount the EBS volume to the mount point 
sudo mount /dev/xvdf /data
//Make the volume mount persistent
sudo nano /etc/fstab 
	== then add '/dev/xvdf /data ext4 defaults,nofail 0 2' and save the file